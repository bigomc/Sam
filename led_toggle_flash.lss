
led_toggle_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000077c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  20000004  00000780  00020004  2**2
                  ALLOC
  3 .stack        00002004  20000034  000007b0  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000074fd  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001325  00000000  00000000  00027582  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000220  00000000  00000000  000288a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000208  00000000  00000000  00028ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001ba9f  00000000  00000000  00028ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005599  00000000  00000000  0004476e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009b399  00000000  00000000  00049d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004dc  00000000  00000000  000e50a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019c6  00000000  00000000  000e557c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002038 	.word	0x20002038
   4:	000004dd 	.word	0x000004dd
   8:	000004d9 	.word	0x000004d9
   c:	000004d9 	.word	0x000004d9
	...
  2c:	000004d9 	.word	0x000004d9
	...
  38:	000004d9 	.word	0x000004d9
  3c:	00000571 	.word	0x00000571
  40:	000004d9 	.word	0x000004d9
  44:	000004d9 	.word	0x000004d9
  48:	000004d9 	.word	0x000004d9
  4c:	000004d9 	.word	0x000004d9
  50:	000004d9 	.word	0x000004d9
  54:	000004d9 	.word	0x000004d9
  58:	000004d9 	.word	0x000004d9
  5c:	000004d9 	.word	0x000004d9
  60:	000004d9 	.word	0x000004d9
  64:	000004d9 	.word	0x000004d9
  68:	000004d9 	.word	0x000004d9
  6c:	000004d9 	.word	0x000004d9
  70:	000004d9 	.word	0x000004d9
  74:	000004d9 	.word	0x000004d9
  78:	000004d9 	.word	0x000004d9
  7c:	000004d9 	.word	0x000004d9
  80:	000004d9 	.word	0x000004d9
  84:	000004d9 	.word	0x000004d9
  88:	000004d9 	.word	0x000004d9
  8c:	000004d9 	.word	0x000004d9
  90:	000004d9 	.word	0x000004d9
  94:	000004d9 	.word	0x000004d9
  98:	000004d9 	.word	0x000004d9
  9c:	000004d9 	.word	0x000004d9
  a0:	000004d9 	.word	0x000004d9
  a4:	000004d9 	.word	0x000004d9
  a8:	000004d9 	.word	0x000004d9
  ac:	000004d9 	.word	0x000004d9
  b0:	000004d9 	.word	0x000004d9
  b4:	000004d9 	.word	0x000004d9
  b8:	000004d9 	.word	0x000004d9

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	20000004 	.word	0x20000004
  dc:	00000000 	.word	0x00000000
  e0:	0000077c 	.word	0x0000077c

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000008 	.word	0x20000008
 110:	0000077c 	.word	0x0000077c
 114:	0000077c 	.word	0x0000077c
 118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
 11e:	681b      	ldr	r3, [r3, #0]
 120:	2b00      	cmp	r3, #0
 122:	d110      	bne.n	146 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 128:	2b00      	cmp	r3, #0
 12a:	d109      	bne.n	140 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 12c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 12e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 132:	2200      	movs	r2, #0
 134:	4b07      	ldr	r3, [pc, #28]	; (154 <cpu_irq_enter_critical+0x38>)
 136:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 138:	3201      	adds	r2, #1
 13a:	4b07      	ldr	r3, [pc, #28]	; (158 <cpu_irq_enter_critical+0x3c>)
 13c:	701a      	strb	r2, [r3, #0]
 13e:	e002      	b.n	146 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 140:	2200      	movs	r2, #0
 142:	4b05      	ldr	r3, [pc, #20]	; (158 <cpu_irq_enter_critical+0x3c>)
 144:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 146:	4a02      	ldr	r2, [pc, #8]	; (150 <cpu_irq_enter_critical+0x34>)
 148:	6813      	ldr	r3, [r2, #0]
 14a:	3301      	adds	r3, #1
 14c:	6013      	str	r3, [r2, #0]
}
 14e:	4770      	bx	lr
 150:	20000020 	.word	0x20000020
 154:	20000000 	.word	0x20000000
 158:	20000024 	.word	0x20000024

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
 15e:	681a      	ldr	r2, [r3, #0]
 160:	3a01      	subs	r2, #1
 162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 164:	681b      	ldr	r3, [r3, #0]
 166:	2b00      	cmp	r3, #0
 168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
 16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
 16c:	781b      	ldrb	r3, [r3, #0]
 16e:	2b00      	cmp	r3, #0
 170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 172:	2201      	movs	r2, #1
 174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
 176:	701a      	strb	r2, [r3, #0]
 178:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 17c:	b662      	cpsie	i
	}
}
 17e:	4770      	bx	lr
 180:	20000020 	.word	0x20000020
 184:	20000024 	.word	0x20000024
 188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 18c:	b570      	push	{r4, r5, r6, lr}
 18e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 190:	ac01      	add	r4, sp, #4
 192:	2501      	movs	r5, #1
 194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 196:	2600      	movs	r6, #0
 198:	70a6      	strb	r6, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 19c:	0021      	movs	r1, r4
 19e:	200f      	movs	r0, #15
 1a0:	f000 f80e 	bl	1c0 <port_pin_set_config>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1a4:	2280      	movs	r2, #128	; 0x80
 1a6:	0212      	lsls	r2, r2, #8
 1a8:	2382      	movs	r3, #130	; 0x82
 1aa:	05db      	lsls	r3, r3, #23
 1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1ae:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1b2:	0021      	movs	r1, r4
 1b4:	201c      	movs	r0, #28
 1b6:	f000 f803 	bl	1c0 <port_pin_set_config>
}
 1ba:	b002      	add	sp, #8
 1bc:	bd70      	pop	{r4, r5, r6, pc}
 1be:	46c0      	nop			; (mov r8, r8)

000001c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1c0:	b500      	push	{lr}
 1c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1c4:	ab01      	add	r3, sp, #4
 1c6:	2280      	movs	r2, #128	; 0x80
 1c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1ca:	780a      	ldrb	r2, [r1, #0]
 1cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1ce:	784a      	ldrb	r2, [r1, #1]
 1d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1d2:	788a      	ldrb	r2, [r1, #2]
 1d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1d6:	0019      	movs	r1, r3
 1d8:	f000 f95c 	bl	494 <system_pinmux_pin_set_config>
}
 1dc:	b003      	add	sp, #12
 1de:	bd00      	pop	{pc}

000001e0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 1e0:	b510      	push	{r4, lr}
	switch (clock_source) {
 1e2:	2807      	cmp	r0, #7
 1e4:	d803      	bhi.n	1ee <system_clock_source_get_hz+0xe>
 1e6:	0080      	lsls	r0, r0, #2
 1e8:	4b0f      	ldr	r3, [pc, #60]	; (228 <system_clock_source_get_hz+0x48>)
 1ea:	581b      	ldr	r3, [r3, r0]
 1ec:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
 1ee:	2000      	movs	r0, #0
 1f0:	e018      	b.n	224 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
 1f2:	4b0e      	ldr	r3, [pc, #56]	; (22c <system_clock_source_get_hz+0x4c>)
 1f4:	6858      	ldr	r0, [r3, #4]
 1f6:	e015      	b.n	224 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
 1f8:	4b0d      	ldr	r3, [pc, #52]	; (230 <system_clock_source_get_hz+0x50>)
 1fa:	7d59      	ldrb	r1, [r3, #21]
 1fc:	0709      	lsls	r1, r1, #28
 1fe:	0f09      	lsrs	r1, r1, #28
 200:	3101      	adds	r1, #1
 202:	480c      	ldr	r0, [pc, #48]	; (234 <system_clock_source_get_hz+0x54>)
 204:	f000 f9e8 	bl	5d8 <__aeabi_uidiv>
 208:	e00c      	b.n	224 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
 20a:	4b08      	ldr	r3, [pc, #32]	; (22c <system_clock_source_get_hz+0x4c>)
 20c:	6898      	ldr	r0, [r3, #8]
 20e:	e009      	b.n	224 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 210:	4b07      	ldr	r3, [pc, #28]	; (230 <system_clock_source_get_hz+0x50>)
 212:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
 214:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 216:	079b      	lsls	r3, r3, #30
 218:	d504      	bpl.n	224 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
 21a:	4b04      	ldr	r3, [pc, #16]	; (22c <system_clock_source_get_hz+0x4c>)
 21c:	6818      	ldr	r0, [r3, #0]
 21e:	e001      	b.n	224 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
 220:	2080      	movs	r0, #128	; 0x80
 222:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
 224:	bd10      	pop	{r4, pc}
 226:	46c0      	nop			; (mov r8, r8)
 228:	0000073c 	.word	0x0000073c
 22c:	20000028 	.word	0x20000028
 230:	40001000 	.word	0x40001000
 234:	02dc6c00 	.word	0x02dc6c00

00000238 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
 238:	b500      	push	{lr}
 23a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
 23c:	2203      	movs	r2, #3
 23e:	4b10      	ldr	r3, [pc, #64]	; (280 <system_clock_init+0x48>)
 240:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 242:	4a10      	ldr	r2, [pc, #64]	; (284 <system_clock_init+0x4c>)
 244:	6853      	ldr	r3, [r2, #4]
 246:	211e      	movs	r1, #30
 248:	438b      	bics	r3, r1
 24a:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
 24c:	4a0e      	ldr	r2, [pc, #56]	; (288 <system_clock_init+0x50>)
 24e:	7d11      	ldrb	r1, [r2, #20]
 250:	2380      	movs	r3, #128	; 0x80
 252:	430b      	orrs	r3, r1
 254:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 256:	f000 f81b 	bl	290 <system_gclk_init>
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
 25a:	2301      	movs	r3, #1
 25c:	4a0b      	ldr	r2, [pc, #44]	; (28c <system_clock_init+0x54>)
 25e:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 260:	a901      	add	r1, sp, #4
 262:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
 264:	2300      	movs	r3, #0
 266:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
 268:	2206      	movs	r2, #6
 26a:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 26c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
 26e:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 270:	2000      	movs	r0, #0
 272:	f000 f81f 	bl	2b4 <system_gclk_gen_set_config>
 276:	2000      	movs	r0, #0
 278:	f000 f86e 	bl	358 <system_gclk_gen_enable>
#endif

}
 27c:	b005      	add	sp, #20
 27e:	bd00      	pop	{pc}
 280:	40001800 	.word	0x40001800
 284:	41004000 	.word	0x41004000
 288:	40001000 	.word	0x40001000
 28c:	40000800 	.word	0x40000800

00000290 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
 290:	4a06      	ldr	r2, [pc, #24]	; (2ac <system_gclk_init+0x1c>)
 292:	6951      	ldr	r1, [r2, #20]
 294:	2380      	movs	r3, #128	; 0x80
 296:	430b      	orrs	r3, r1
 298:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
 29a:	2201      	movs	r2, #1
 29c:	4b04      	ldr	r3, [pc, #16]	; (2b0 <system_gclk_init+0x20>)
 29e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
 2a0:	0019      	movs	r1, r3
 2a2:	780b      	ldrb	r3, [r1, #0]
 2a4:	4213      	tst	r3, r2
 2a6:	d1fc      	bne.n	2a2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 2a8:	4770      	bx	lr
 2aa:	46c0      	nop			; (mov r8, r8)
 2ac:	40000800 	.word	0x40000800
 2b0:	40001c00 	.word	0x40001c00

000002b4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 2b4:	b570      	push	{r4, r5, r6, lr}
 2b6:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
 2b8:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 2ba:	784b      	ldrb	r3, [r1, #1]
 2bc:	2b00      	cmp	r3, #0
 2be:	d002      	beq.n	2c6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 2c0:	2380      	movs	r3, #128	; 0x80
 2c2:	00db      	lsls	r3, r3, #3
 2c4:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 2c6:	7a4b      	ldrb	r3, [r1, #9]
 2c8:	2b00      	cmp	r3, #0
 2ca:	d002      	beq.n	2d2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 2cc:	2380      	movs	r3, #128	; 0x80
 2ce:	011b      	lsls	r3, r3, #4
 2d0:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 2d2:	684a      	ldr	r2, [r1, #4]
 2d4:	2a01      	cmp	r2, #1
 2d6:	d917      	bls.n	308 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 2d8:	1e53      	subs	r3, r2, #1
 2da:	421a      	tst	r2, r3
 2dc:	d10f      	bne.n	2fe <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 2de:	2a02      	cmp	r2, #2
 2e0:	d906      	bls.n	2f0 <system_gclk_gen_set_config+0x3c>
 2e2:	2302      	movs	r3, #2
 2e4:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
 2e6:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 2e8:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 2ea:	429a      	cmp	r2, r3
 2ec:	d8fb      	bhi.n	2e6 <system_gclk_gen_set_config+0x32>
 2ee:	e000      	b.n	2f2 <system_gclk_gen_set_config+0x3e>
 2f0:	2000      	movs	r0, #0
 2f2:	2380      	movs	r3, #128	; 0x80
 2f4:	015b      	lsls	r3, r3, #5
 2f6:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 2f8:	0400      	lsls	r0, r0, #16
 2fa:	4304      	orrs	r4, r0
 2fc:	e004      	b.n	308 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 2fe:	0412      	lsls	r2, r2, #16
 300:	2380      	movs	r3, #128	; 0x80
 302:	009b      	lsls	r3, r3, #2
 304:	431a      	orrs	r2, r3
 306:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 308:	7a0b      	ldrb	r3, [r1, #8]
 30a:	2b00      	cmp	r3, #0
 30c:	d002      	beq.n	314 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 30e:	2380      	movs	r3, #128	; 0x80
 310:	019b      	lsls	r3, r3, #6
 312:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 314:	2604      	movs	r6, #4
 316:	40ae      	lsls	r6, r5
 318:	490d      	ldr	r1, [pc, #52]	; (350 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 31a:	4a0e      	ldr	r2, [pc, #56]	; (354 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 31c:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 31e:	4013      	ands	r3, r2
 320:	421e      	tst	r6, r3
 322:	d1fb      	bne.n	31c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 324:	f7ff fefa 	bl	11c <cpu_irq_enter_critical>
 328:	00ad      	lsls	r5, r5, #2
 32a:	4b09      	ldr	r3, [pc, #36]	; (350 <system_gclk_gen_set_config+0x9c>)
 32c:	469c      	mov	ip, r3
 32e:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
 330:	6a28      	ldr	r0, [r5, #32]
 332:	2380      	movs	r3, #128	; 0x80
 334:	005b      	lsls	r3, r3, #1
 336:	4018      	ands	r0, r3
 338:	4320      	orrs	r0, r4
 33a:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 33c:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 33e:	4a05      	ldr	r2, [pc, #20]	; (354 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 340:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 342:	4013      	ands	r3, r2
 344:	421e      	tst	r6, r3
 346:	d1fb      	bne.n	340 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 348:	f7ff ff08 	bl	15c <cpu_irq_leave_critical>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
 34c:	bd70      	pop	{r4, r5, r6, pc}
 34e:	46c0      	nop			; (mov r8, r8)
 350:	40001c00 	.word	0x40001c00
 354:	000007fc 	.word	0x000007fc

00000358 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 358:	b510      	push	{r4, lr}
 35a:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 35c:	2204      	movs	r2, #4
 35e:	4082      	lsls	r2, r0
 360:	4809      	ldr	r0, [pc, #36]	; (388 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 362:	490a      	ldr	r1, [pc, #40]	; (38c <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 364:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 366:	400b      	ands	r3, r1
 368:	421a      	tst	r2, r3
 36a:	d1fb      	bne.n	364 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 36c:	f7ff fed6 	bl	11c <cpu_irq_enter_critical>
 370:	00a4      	lsls	r4, r4, #2
 372:	4b05      	ldr	r3, [pc, #20]	; (388 <system_gclk_gen_enable+0x30>)
 374:	469c      	mov	ip, r3
 376:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
 378:	6a23      	ldr	r3, [r4, #32]
 37a:	2280      	movs	r2, #128	; 0x80
 37c:	0052      	lsls	r2, r2, #1
 37e:	4313      	orrs	r3, r2
 380:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 382:	f7ff feeb 	bl	15c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
 386:	bd10      	pop	{r4, pc}
 388:	40001c00 	.word	0x40001c00
 38c:	000007fc 	.word	0x000007fc

00000390 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 392:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 394:	2204      	movs	r2, #4
 396:	4082      	lsls	r2, r0
 398:	4812      	ldr	r0, [pc, #72]	; (3e4 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 39a:	4913      	ldr	r1, [pc, #76]	; (3e8 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 39c:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 39e:	400b      	ands	r3, r1
 3a0:	421a      	tst	r2, r3
 3a2:	d1fb      	bne.n	39c <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3a4:	f7ff feba 	bl	11c <cpu_irq_enter_critical>

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
 3a8:	4f0e      	ldr	r7, [pc, #56]	; (3e4 <system_gclk_gen_get_hz+0x54>)
 3aa:	3408      	adds	r4, #8
 3ac:	00a4      	lsls	r4, r4, #2
 3ae:	59e0      	ldr	r0, [r4, r7]
 3b0:	0740      	lsls	r0, r0, #29
 3b2:	0f40      	lsrs	r0, r0, #29
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
 3b4:	f7ff ff14 	bl	1e0 <system_clock_source_get_hz>
 3b8:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
 3ba:	59e5      	ldr	r5, [r4, r7]
 3bc:	04ed      	lsls	r5, r5, #19
 3be:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
 3c0:	59e4      	ldr	r4, [r4, r7]
 3c2:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 3c4:	f7ff feca 	bl	15c <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 3c8:	2d00      	cmp	r5, #0
 3ca:	d107      	bne.n	3dc <system_gclk_gen_get_hz+0x4c>
 3cc:	2c01      	cmp	r4, #1
 3ce:	d907      	bls.n	3e0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
 3d0:	0021      	movs	r1, r4
 3d2:	0030      	movs	r0, r6
 3d4:	f000 f900 	bl	5d8 <__aeabi_uidiv>
 3d8:	0006      	movs	r6, r0
 3da:	e001      	b.n	3e0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 3dc:	3401      	adds	r4, #1
 3de:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
 3e0:	0030      	movs	r0, r6
 3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 3e4:	40001c00 	.word	0x40001c00
 3e8:	000007fc 	.word	0x000007fc

000003ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 3ec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 3ee:	78d3      	ldrb	r3, [r2, #3]
 3f0:	2b00      	cmp	r3, #0
 3f2:	d11e      	bne.n	432 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 3f4:	7813      	ldrb	r3, [r2, #0]
 3f6:	2b80      	cmp	r3, #128	; 0x80
 3f8:	d004      	beq.n	404 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 3fa:	061b      	lsls	r3, r3, #24
 3fc:	2480      	movs	r4, #128	; 0x80
 3fe:	0264      	lsls	r4, r4, #9
 400:	4323      	orrs	r3, r4
 402:	e000      	b.n	406 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 404:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 406:	7854      	ldrb	r4, [r2, #1]
 408:	2502      	movs	r5, #2
 40a:	43ac      	bics	r4, r5
 40c:	d10a      	bne.n	424 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 40e:	7894      	ldrb	r4, [r2, #2]
 410:	2c00      	cmp	r4, #0
 412:	d103      	bne.n	41c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 414:	2480      	movs	r4, #128	; 0x80
 416:	02a4      	lsls	r4, r4, #10
 418:	4323      	orrs	r3, r4
 41a:	e002      	b.n	422 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 41c:	24c0      	movs	r4, #192	; 0xc0
 41e:	02e4      	lsls	r4, r4, #11
 420:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 422:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 424:	7854      	ldrb	r4, [r2, #1]
 426:	3c01      	subs	r4, #1
 428:	2c01      	cmp	r4, #1
 42a:	d812      	bhi.n	452 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 42c:	4c18      	ldr	r4, [pc, #96]	; (490 <_system_pinmux_config+0xa4>)
 42e:	4023      	ands	r3, r4
 430:	e00f      	b.n	452 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 432:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 434:	040b      	lsls	r3, r1, #16
 436:	0c1b      	lsrs	r3, r3, #16
 438:	24a0      	movs	r4, #160	; 0xa0
 43a:	05e4      	lsls	r4, r4, #23
 43c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 43e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 440:	0c0b      	lsrs	r3, r1, #16
 442:	24d0      	movs	r4, #208	; 0xd0
 444:	0624      	lsls	r4, r4, #24
 446:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 448:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 44a:	78d3      	ldrb	r3, [r2, #3]
 44c:	2b00      	cmp	r3, #0
 44e:	d018      	beq.n	482 <_system_pinmux_config+0x96>
 450:	e01c      	b.n	48c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 452:	040c      	lsls	r4, r1, #16
 454:	0c24      	lsrs	r4, r4, #16
 456:	25a0      	movs	r5, #160	; 0xa0
 458:	05ed      	lsls	r5, r5, #23
 45a:	432c      	orrs	r4, r5
 45c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 45e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 460:	0c0c      	lsrs	r4, r1, #16
 462:	25d0      	movs	r5, #208	; 0xd0
 464:	062d      	lsls	r5, r5, #24
 466:	432c      	orrs	r4, r5
 468:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 46a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 46c:	78d4      	ldrb	r4, [r2, #3]
 46e:	2c00      	cmp	r4, #0
 470:	d10c      	bne.n	48c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 472:	035b      	lsls	r3, r3, #13
 474:	d505      	bpl.n	482 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 476:	7893      	ldrb	r3, [r2, #2]
 478:	2b01      	cmp	r3, #1
 47a:	d101      	bne.n	480 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 47c:	6181      	str	r1, [r0, #24]
 47e:	e000      	b.n	482 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 480:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 482:	7853      	ldrb	r3, [r2, #1]
 484:	3b01      	subs	r3, #1
 486:	2b01      	cmp	r3, #1
 488:	d800      	bhi.n	48c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 48a:	6081      	str	r1, [r0, #8]
		}
	}
}
 48c:	bd30      	pop	{r4, r5, pc}
 48e:	46c0      	nop			; (mov r8, r8)
 490:	fffbffff 	.word	0xfffbffff

00000494 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 494:	b510      	push	{r4, lr}
 496:	0003      	movs	r3, r0
 498:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 49a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 49c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 49e:	2900      	cmp	r1, #0
 4a0:	d105      	bne.n	4ae <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
 4a2:	0958      	lsrs	r0, r3, #5
 4a4:	01c0      	lsls	r0, r0, #7
 4a6:	2182      	movs	r1, #130	; 0x82
 4a8:	05c9      	lsls	r1, r1, #23
 4aa:	468c      	mov	ip, r1
 4ac:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 4ae:	211f      	movs	r1, #31
 4b0:	400b      	ands	r3, r1
 4b2:	391e      	subs	r1, #30
 4b4:	4099      	lsls	r1, r3
 4b6:	f7ff ff99 	bl	3ec <_system_pinmux_config>
}
 4ba:	bd10      	pop	{r4, pc}

000004bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 4bc:	4770      	bx	lr
 4be:	46c0      	nop			; (mov r8, r8)

000004c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 4c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 4c2:	f7ff feb9 	bl	238 <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
 4c6:	f7ff fe61 	bl	18c <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
 4ca:	f7ff fff7 	bl	4bc <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
 4ce:	f7ff fff5 	bl	4bc <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 4d2:	f7ff fff3 	bl	4bc <_system_dummy_init>
}
 4d6:	bd10      	pop	{r4, pc}

000004d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 4d8:	e7fe      	b.n	4d8 <Dummy_Handler>
 4da:	46c0      	nop			; (mov r8, r8)

000004dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 4dc:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 4de:	4b1b      	ldr	r3, [pc, #108]	; (54c <Reset_Handler+0x70>)
 4e0:	4a1b      	ldr	r2, [pc, #108]	; (550 <Reset_Handler+0x74>)
 4e2:	429a      	cmp	r2, r3
 4e4:	d003      	beq.n	4ee <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 4e6:	4b1b      	ldr	r3, [pc, #108]	; (554 <Reset_Handler+0x78>)
 4e8:	4a18      	ldr	r2, [pc, #96]	; (54c <Reset_Handler+0x70>)
 4ea:	429a      	cmp	r2, r3
 4ec:	d304      	bcc.n	4f8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 4ee:	4b1a      	ldr	r3, [pc, #104]	; (558 <Reset_Handler+0x7c>)
 4f0:	4a1a      	ldr	r2, [pc, #104]	; (55c <Reset_Handler+0x80>)
 4f2:	429a      	cmp	r2, r3
 4f4:	d310      	bcc.n	518 <Reset_Handler+0x3c>
 4f6:	e01e      	b.n	536 <Reset_Handler+0x5a>
 4f8:	4a19      	ldr	r2, [pc, #100]	; (560 <Reset_Handler+0x84>)
 4fa:	4b16      	ldr	r3, [pc, #88]	; (554 <Reset_Handler+0x78>)
 4fc:	3303      	adds	r3, #3
 4fe:	1a9b      	subs	r3, r3, r2
 500:	089b      	lsrs	r3, r3, #2
 502:	3301      	adds	r3, #1
 504:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 506:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 508:	4810      	ldr	r0, [pc, #64]	; (54c <Reset_Handler+0x70>)
 50a:	4911      	ldr	r1, [pc, #68]	; (550 <Reset_Handler+0x74>)
 50c:	588c      	ldr	r4, [r1, r2]
 50e:	5084      	str	r4, [r0, r2]
 510:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 512:	429a      	cmp	r2, r3
 514:	d1fa      	bne.n	50c <Reset_Handler+0x30>
 516:	e7ea      	b.n	4ee <Reset_Handler+0x12>
 518:	4a12      	ldr	r2, [pc, #72]	; (564 <Reset_Handler+0x88>)
 51a:	4b0f      	ldr	r3, [pc, #60]	; (558 <Reset_Handler+0x7c>)
 51c:	3303      	adds	r3, #3
 51e:	1a9b      	subs	r3, r3, r2
 520:	089b      	lsrs	r3, r3, #2
 522:	3301      	adds	r3, #1
 524:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 526:	2200      	movs	r2, #0
                *pDest++ = 0;
 528:	480c      	ldr	r0, [pc, #48]	; (55c <Reset_Handler+0x80>)
 52a:	2100      	movs	r1, #0
 52c:	1814      	adds	r4, r2, r0
 52e:	6021      	str	r1, [r4, #0]
 530:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 532:	429a      	cmp	r2, r3
 534:	d1fa      	bne.n	52c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 536:	4a0c      	ldr	r2, [pc, #48]	; (568 <Reset_Handler+0x8c>)
 538:	21ff      	movs	r1, #255	; 0xff
 53a:	4b0c      	ldr	r3, [pc, #48]	; (56c <Reset_Handler+0x90>)
 53c:	438b      	bics	r3, r1
 53e:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
 540:	f000 f8d6 	bl	6f0 <__libc_init_array>

        /* Branch to main function */
        main();
 544:	f000 f81a 	bl	57c <main>
 548:	e7fe      	b.n	548 <Reset_Handler+0x6c>
 54a:	46c0      	nop			; (mov r8, r8)
 54c:	20000000 	.word	0x20000000
 550:	0000077c 	.word	0x0000077c
 554:	20000004 	.word	0x20000004
 558:	20000034 	.word	0x20000034
 55c:	20000004 	.word	0x20000004
 560:	20000004 	.word	0x20000004
 564:	20000008 	.word	0x20000008
 568:	e000ed00 	.word	0xe000ed00
 56c:	00000000 	.word	0x00000000

00000570 <SysTick_Handler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 570:	2280      	movs	r2, #128	; 0x80
 572:	0212      	lsls	r2, r2, #8
 574:	2382      	movs	r3, #130	; 0x82
 576:	05db      	lsls	r3, r3, #23
 578:	61da      	str	r2, [r3, #28]
 *        vector table.
 */
void SysTick_Handler(void)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
 57a:	4770      	bx	lr

0000057c <main>:
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}

int main(void)
{
 57c:	b500      	push	{lr}
 57e:	b083      	sub	sp, #12
	system_init();
 580:	f7ff ff9e 	bl	4c0 <system_init>

	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 584:	2000      	movs	r0, #0
 586:	f7ff ff03 	bl	390 <system_gclk_gen_get_hz>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 58a:	3801      	subs	r0, #1
 58c:	4b0f      	ldr	r3, [pc, #60]	; (5cc <main+0x50>)
 58e:	4298      	cmp	r0, r3
 590:	d80d      	bhi.n	5ae <main+0x32>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 592:	4a0f      	ldr	r2, [pc, #60]	; (5d0 <main+0x54>)
 594:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 596:	490f      	ldr	r1, [pc, #60]	; (5d4 <main+0x58>)
 598:	6a0b      	ldr	r3, [r1, #32]
 59a:	021b      	lsls	r3, r3, #8
 59c:	0a1b      	lsrs	r3, r3, #8
 59e:	20c0      	movs	r0, #192	; 0xc0
 5a0:	0600      	lsls	r0, r0, #24
 5a2:	4303      	orrs	r3, r0
 5a4:	620b      	str	r3, [r1, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 5a6:	2300      	movs	r3, #0
 5a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 5aa:	3307      	adds	r3, #7
 5ac:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 5ae:	a901      	add	r1, sp, #4
 5b0:	2301      	movs	r3, #1
 5b2:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 5b4:	2200      	movs	r2, #0
 5b6:	708a      	strb	r2, [r1, #2]
static void config_led(void)
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 5b8:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 5ba:	200f      	movs	r0, #15
 5bc:	f7ff fe00 	bl	1c0 <port_pin_set_config>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 5c0:	2280      	movs	r2, #128	; 0x80
 5c2:	0212      	lsls	r2, r2, #8
 5c4:	2382      	movs	r3, #130	; 0x82
 5c6:	05db      	lsls	r3, r3, #23
 5c8:	619a      	str	r2, [r3, #24]
 5ca:	e7fe      	b.n	5ca <main+0x4e>
 5cc:	00ffffff 	.word	0x00ffffff
 5d0:	e000e010 	.word	0xe000e010
 5d4:	e000ed00 	.word	0xe000ed00

000005d8 <__aeabi_uidiv>:
 5d8:	2200      	movs	r2, #0
 5da:	0843      	lsrs	r3, r0, #1
 5dc:	428b      	cmp	r3, r1
 5de:	d374      	bcc.n	6ca <__aeabi_uidiv+0xf2>
 5e0:	0903      	lsrs	r3, r0, #4
 5e2:	428b      	cmp	r3, r1
 5e4:	d35f      	bcc.n	6a6 <__aeabi_uidiv+0xce>
 5e6:	0a03      	lsrs	r3, r0, #8
 5e8:	428b      	cmp	r3, r1
 5ea:	d344      	bcc.n	676 <__aeabi_uidiv+0x9e>
 5ec:	0b03      	lsrs	r3, r0, #12
 5ee:	428b      	cmp	r3, r1
 5f0:	d328      	bcc.n	644 <__aeabi_uidiv+0x6c>
 5f2:	0c03      	lsrs	r3, r0, #16
 5f4:	428b      	cmp	r3, r1
 5f6:	d30d      	bcc.n	614 <__aeabi_uidiv+0x3c>
 5f8:	22ff      	movs	r2, #255	; 0xff
 5fa:	0209      	lsls	r1, r1, #8
 5fc:	ba12      	rev	r2, r2
 5fe:	0c03      	lsrs	r3, r0, #16
 600:	428b      	cmp	r3, r1
 602:	d302      	bcc.n	60a <__aeabi_uidiv+0x32>
 604:	1212      	asrs	r2, r2, #8
 606:	0209      	lsls	r1, r1, #8
 608:	d065      	beq.n	6d6 <__aeabi_uidiv+0xfe>
 60a:	0b03      	lsrs	r3, r0, #12
 60c:	428b      	cmp	r3, r1
 60e:	d319      	bcc.n	644 <__aeabi_uidiv+0x6c>
 610:	e000      	b.n	614 <__aeabi_uidiv+0x3c>
 612:	0a09      	lsrs	r1, r1, #8
 614:	0bc3      	lsrs	r3, r0, #15
 616:	428b      	cmp	r3, r1
 618:	d301      	bcc.n	61e <__aeabi_uidiv+0x46>
 61a:	03cb      	lsls	r3, r1, #15
 61c:	1ac0      	subs	r0, r0, r3
 61e:	4152      	adcs	r2, r2
 620:	0b83      	lsrs	r3, r0, #14
 622:	428b      	cmp	r3, r1
 624:	d301      	bcc.n	62a <__aeabi_uidiv+0x52>
 626:	038b      	lsls	r3, r1, #14
 628:	1ac0      	subs	r0, r0, r3
 62a:	4152      	adcs	r2, r2
 62c:	0b43      	lsrs	r3, r0, #13
 62e:	428b      	cmp	r3, r1
 630:	d301      	bcc.n	636 <__aeabi_uidiv+0x5e>
 632:	034b      	lsls	r3, r1, #13
 634:	1ac0      	subs	r0, r0, r3
 636:	4152      	adcs	r2, r2
 638:	0b03      	lsrs	r3, r0, #12
 63a:	428b      	cmp	r3, r1
 63c:	d301      	bcc.n	642 <__aeabi_uidiv+0x6a>
 63e:	030b      	lsls	r3, r1, #12
 640:	1ac0      	subs	r0, r0, r3
 642:	4152      	adcs	r2, r2
 644:	0ac3      	lsrs	r3, r0, #11
 646:	428b      	cmp	r3, r1
 648:	d301      	bcc.n	64e <__aeabi_uidiv+0x76>
 64a:	02cb      	lsls	r3, r1, #11
 64c:	1ac0      	subs	r0, r0, r3
 64e:	4152      	adcs	r2, r2
 650:	0a83      	lsrs	r3, r0, #10
 652:	428b      	cmp	r3, r1
 654:	d301      	bcc.n	65a <__aeabi_uidiv+0x82>
 656:	028b      	lsls	r3, r1, #10
 658:	1ac0      	subs	r0, r0, r3
 65a:	4152      	adcs	r2, r2
 65c:	0a43      	lsrs	r3, r0, #9
 65e:	428b      	cmp	r3, r1
 660:	d301      	bcc.n	666 <__aeabi_uidiv+0x8e>
 662:	024b      	lsls	r3, r1, #9
 664:	1ac0      	subs	r0, r0, r3
 666:	4152      	adcs	r2, r2
 668:	0a03      	lsrs	r3, r0, #8
 66a:	428b      	cmp	r3, r1
 66c:	d301      	bcc.n	672 <__aeabi_uidiv+0x9a>
 66e:	020b      	lsls	r3, r1, #8
 670:	1ac0      	subs	r0, r0, r3
 672:	4152      	adcs	r2, r2
 674:	d2cd      	bcs.n	612 <__aeabi_uidiv+0x3a>
 676:	09c3      	lsrs	r3, r0, #7
 678:	428b      	cmp	r3, r1
 67a:	d301      	bcc.n	680 <__aeabi_uidiv+0xa8>
 67c:	01cb      	lsls	r3, r1, #7
 67e:	1ac0      	subs	r0, r0, r3
 680:	4152      	adcs	r2, r2
 682:	0983      	lsrs	r3, r0, #6
 684:	428b      	cmp	r3, r1
 686:	d301      	bcc.n	68c <__aeabi_uidiv+0xb4>
 688:	018b      	lsls	r3, r1, #6
 68a:	1ac0      	subs	r0, r0, r3
 68c:	4152      	adcs	r2, r2
 68e:	0943      	lsrs	r3, r0, #5
 690:	428b      	cmp	r3, r1
 692:	d301      	bcc.n	698 <__aeabi_uidiv+0xc0>
 694:	014b      	lsls	r3, r1, #5
 696:	1ac0      	subs	r0, r0, r3
 698:	4152      	adcs	r2, r2
 69a:	0903      	lsrs	r3, r0, #4
 69c:	428b      	cmp	r3, r1
 69e:	d301      	bcc.n	6a4 <__aeabi_uidiv+0xcc>
 6a0:	010b      	lsls	r3, r1, #4
 6a2:	1ac0      	subs	r0, r0, r3
 6a4:	4152      	adcs	r2, r2
 6a6:	08c3      	lsrs	r3, r0, #3
 6a8:	428b      	cmp	r3, r1
 6aa:	d301      	bcc.n	6b0 <__aeabi_uidiv+0xd8>
 6ac:	00cb      	lsls	r3, r1, #3
 6ae:	1ac0      	subs	r0, r0, r3
 6b0:	4152      	adcs	r2, r2
 6b2:	0883      	lsrs	r3, r0, #2
 6b4:	428b      	cmp	r3, r1
 6b6:	d301      	bcc.n	6bc <__aeabi_uidiv+0xe4>
 6b8:	008b      	lsls	r3, r1, #2
 6ba:	1ac0      	subs	r0, r0, r3
 6bc:	4152      	adcs	r2, r2
 6be:	0843      	lsrs	r3, r0, #1
 6c0:	428b      	cmp	r3, r1
 6c2:	d301      	bcc.n	6c8 <__aeabi_uidiv+0xf0>
 6c4:	004b      	lsls	r3, r1, #1
 6c6:	1ac0      	subs	r0, r0, r3
 6c8:	4152      	adcs	r2, r2
 6ca:	1a41      	subs	r1, r0, r1
 6cc:	d200      	bcs.n	6d0 <__aeabi_uidiv+0xf8>
 6ce:	4601      	mov	r1, r0
 6d0:	4152      	adcs	r2, r2
 6d2:	4610      	mov	r0, r2
 6d4:	4770      	bx	lr
 6d6:	e7ff      	b.n	6d8 <__aeabi_uidiv+0x100>
 6d8:	b501      	push	{r0, lr}
 6da:	2000      	movs	r0, #0
 6dc:	f000 f806 	bl	6ec <__aeabi_idiv0>
 6e0:	bd02      	pop	{r1, pc}
 6e2:	46c0      	nop			; (mov r8, r8)

000006e4 <__aeabi_uidivmod>:
 6e4:	2900      	cmp	r1, #0
 6e6:	d0f7      	beq.n	6d8 <__aeabi_uidiv+0x100>
 6e8:	e776      	b.n	5d8 <__aeabi_uidiv>
 6ea:	4770      	bx	lr

000006ec <__aeabi_idiv0>:
 6ec:	4770      	bx	lr
 6ee:	46c0      	nop			; (mov r8, r8)

000006f0 <__libc_init_array>:
 6f0:	4b0e      	ldr	r3, [pc, #56]	; (72c <__libc_init_array+0x3c>)
 6f2:	b570      	push	{r4, r5, r6, lr}
 6f4:	2500      	movs	r5, #0
 6f6:	001e      	movs	r6, r3
 6f8:	4c0d      	ldr	r4, [pc, #52]	; (730 <__libc_init_array+0x40>)
 6fa:	1ae4      	subs	r4, r4, r3
 6fc:	10a4      	asrs	r4, r4, #2
 6fe:	42a5      	cmp	r5, r4
 700:	d004      	beq.n	70c <__libc_init_array+0x1c>
 702:	00ab      	lsls	r3, r5, #2
 704:	58f3      	ldr	r3, [r6, r3]
 706:	4798      	blx	r3
 708:	3501      	adds	r5, #1
 70a:	e7f8      	b.n	6fe <__libc_init_array+0xe>
 70c:	f000 f826 	bl	75c <_init>
 710:	4b08      	ldr	r3, [pc, #32]	; (734 <__libc_init_array+0x44>)
 712:	2500      	movs	r5, #0
 714:	001e      	movs	r6, r3
 716:	4c08      	ldr	r4, [pc, #32]	; (738 <__libc_init_array+0x48>)
 718:	1ae4      	subs	r4, r4, r3
 71a:	10a4      	asrs	r4, r4, #2
 71c:	42a5      	cmp	r5, r4
 71e:	d004      	beq.n	72a <__libc_init_array+0x3a>
 720:	00ab      	lsls	r3, r5, #2
 722:	58f3      	ldr	r3, [r6, r3]
 724:	4798      	blx	r3
 726:	3501      	adds	r5, #1
 728:	e7f8      	b.n	71c <__libc_init_array+0x2c>
 72a:	bd70      	pop	{r4, r5, r6, pc}
 72c:	00000768 	.word	0x00000768
 730:	00000768 	.word	0x00000768
 734:	00000768 	.word	0x00000768
 738:	0000076c 	.word	0x0000076c
 73c:	000001f2 	.word	0x000001f2
 740:	000001ee 	.word	0x000001ee
 744:	000001ee 	.word	0x000001ee
 748:	00000220 	.word	0x00000220
 74c:	00000220 	.word	0x00000220
 750:	0000020a 	.word	0x0000020a
 754:	000001f8 	.word	0x000001f8
 758:	00000210 	.word	0x00000210

0000075c <_init>:
 75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 75e:	46c0      	nop			; (mov r8, r8)
 760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 762:	bc08      	pop	{r3}
 764:	469e      	mov	lr, r3
 766:	4770      	bx	lr

00000768 <__init_array_start>:
 768:	000000e5 	.word	0x000000e5

0000076c <_fini>:
 76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 76e:	46c0      	nop			; (mov r8, r8)
 770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 772:	bc08      	pop	{r3}
 774:	469e      	mov	lr, r3
 776:	4770      	bx	lr

00000778 <__fini_array_start>:
 778:	000000bd 	.word	0x000000bd
